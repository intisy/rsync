import edu.sc.seis.launch4j.tasks.Launch4jLibraryTask
import io.github.intisy.gradle.inno.InnoSetupTask

plugins {
    id "java"
    id "application"
    id "org.beryx.jlink" version "2.26.0"
    id "org.openjfx.javafxplugin" version "0.1.0"
    id "io.github.intisy.inno-gradle" version "1.6.1.3"
    id "edu.sc.seis.launch4j" version "3.0.6"
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "com.netflix.nebula.ospackage" version "11.11.2"
}

version = project.hasProperty('artifact_version') ? project.property('artifact_version') : '1.0'
description = artifact_description

repositories {
    mavenCentral()
}

application {
    mainModule = "${artifact_name}.main"
    mainClass = "${artifact_group}.${artifact_id}.Main"
}

javafx {
    version = '17'
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.web' ]
}

dependencies {
    implementation "org.openjfx:javafx-controls:17"
    implementation "org.openjfx:javafx-fxml:17"
    implementation "org.openjfx:javafx-web:17"
    implementation "com.google.code.gson:gson:2.12.1"
    implementation "org.fusesource.jansi:jansi:2.4.2"
}

def os = System.getProperty("os.name").toLowerCase()
if (org.gradle.internal.os.OperatingSystem.current().windows) {
    jlink {
        imageName = "jre"
        options = ['--strip-debug', '--compress=2', '--no-header-files', '--no-man-pages']
        launcher {
            name = artifact_name
        }
    }

    tasks.register("createInstaller", InnoSetupTask) {
        fileName = "${artifact_name}.exe"
        icon = "icon.ico"
        name = artifact_name
        debug = true
        version = project.version
        jrePath = buildDir.toPath().resolve("jre")
        autoStart = true
    }

    tasks.register("createExeStandalone", Launch4jLibraryTask) {
        outfile = "${artifact_name}.exe"
        jarTask = project.tasks.shadowJar

        mainClassName = "${artifact_group}.${artifact_id}.Main"
        icon = "${projectDir}/icon.ico"

        bundledJrePath = "jre"
        jreMinVersion = "17"

        dontWrapJar = false
        headerType = "gui"

        outputDir = "${buildDir}/launch4j"

        doLast {
            copy {
                from "${buildDir}/launch4j"
                into "${buildDir}/libs"
            }
        }
    }

    tasks.register("buildWindows") {
        finalizedBy "createInstaller"
    }
    createInstaller.dependsOn "jlink"
    createInstaller.dependsOn "createExeStandalone"

    shadowJar.finalizedBy("buildWindows")
} else if (os.contains("nix") || os.contains("nux") || os.contains("aix")) {
    ospackage {
        packageName = artifact_name
        version = ""
        release = ""
        arch = 'noarch'
        os = LINUX
        summary = artifact_description
        description = artifact_description

        from(jar.outputs.files) {
            into "/usr/share/$artifact_name"
            fileMode 0755
        }
    }

    buildDeb {
        dependsOn jar
        doLast {
            copy {
                from "${buildDir}/distributions/${artifact_name}_1.0_noarch.deb"
                into "${buildDir}/libs"
                rename { String fileName ->
                    "${artifact_name}.deb"
                }
            }
        }
    }

    buildRpm {
        dependsOn jar
        doLast {
            copy {
                from "${buildDir}/distributions/${artifact_name}-1.0.noarch.rpm"
                into "${buildDir}/libs"
                rename { String fileName ->
                    "${artifact_name}.rpm"
                }
            }
        }
    }

    tasks.register("buildLinux") {
        finalizedBy "buildDeb", "buildRpm"
    }
    shadowJar.finalizedBy("buildLinux")
} else if (os.contains("mac")) {
    jlink {
        options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
        launcher {
            name = artifact_name
            jvmArgs = ['-Djdk.gtk.version=2']
        }
        jpackage {
            targetPlatform("mac") {
                jdkHome = '/Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home'
            }
            installerType = 'pkg'
            installerOptions = [
                    '--name', artifact_name,
                    '--description', artifact_description,
                    '--vendor', author
            ]
            imageOptions += ['--icon', 'src/main/resources/icon.icns']
        }
    }
}

jar {
    archiveFileName = "${artifact_name}.jar"
    manifest {
        attributes "Main-Class": "${artifact_group}.${artifact_id}.Main"
    }
}

shadowJar {
    archiveBaseName.set("$artifact_name")
    archiveVersion.set("")
    archiveClassifier.set('shadow')
    minimize()
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
}