import edu.sc.seis.launch4j.tasks.Launch4jLibraryTask
import io.github.intisy.gradle.inno.InnoSetupTask

plugins {
    id "java"
    id "application"
    id "org.beryx.jlink" version "2.26.0"
    id "org.openjfx.javafxplugin" version "0.1.0"
    id "io.github.intisy.online-gradle" version "1.7.2"
    id "io.github.intisy.inno-gradle" version "1.4.2.3"
    id "edu.sc.seis.launch4j" version "3.0.6"
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

version = project.hasProperty('artifact_version') ? project.property('artifact_version') : '1.0'
description = artifact_description

repositories {
    mavenCentral()
}

application {
    mainModule = "${artifact_name}.main"
    mainClass = "${artifact_group}.${artifact_id}.Main"
}

javafx {
    version = '17'
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.web' ]
}

dependencies {
    implementation "org.openjfx:javafx-controls:17"
    implementation "org.openjfx:javafx-fxml:17"
    implementation "org.openjfx:javafx-web:17"
}

jlink {
    imageName = "jre"
    options = ['--strip-debug', '--compress=2', '--no-header-files', '--no-man-pages']
    launcher {
        name = artifact_name
    }
}

tasks.register("createInstaller", InnoSetupTask) {
    fileName = "${artifact_name}.exe"
    icon = "icon.ico"
    name = artifact_name
    debug = false
    jrePath = "jre"
}

tasks.register("createExeStandalone", Launch4jLibraryTask) {
    outfile = "${artifact_name}.exe"
    jarTask = project.tasks.shadowJar

    mainClassName = "${artifact_group}.${artifact_id}.Main"
    icon = "${projectDir}/icon.ico"

    bundledJrePath = "jre"
    jreMinVersion = "17"

    dontWrapJar = false
    headerType = "gui"

    outputDir = "${buildDir}/launch4j"

    doLast {
        copy {
            from "${buildDir}/launch4j"
            into "${buildDir}/libs"
        }
    }
}

jar {
    archiveFileName = "${artifact_name}.jar"
    manifest {
        attributes "Main-Class": "${artifact_group}.${artifact_id}.Main"
    }
}

shadowJar {
    archiveBaseName.set("$artifact_name")
    archiveVersion.set("")
    archiveClassifier.set('shadow')
    minimize()
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
}

shadowJar.finalizedBy(createExeStandalone)
createExeStandalone.finalizedBy(createInstaller)
createInstaller.dependsOn("jlink")